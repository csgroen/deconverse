[{"path":"https://csgroen.github.io/deconverse/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 deconverse authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"context","dir":"Articles","previous_headings":"","what":"Context","title":"Introduction: full explained deconverse pipeline with PBMCs","text":"’ll demonstrate functionality deconverse using PBMC dataset. small single-cell reference limited number cells per cell type particularly lower levels cell type hierarchy. deconverse implements multiple bulk deconvolution methods based single-cell references, enhances adding hierarchy-awareness. deconvoluting different levels cell type hierarchy using results higher level hierarchy correct lower level estimated fractions. example, comes provided Seurat package, peripheral blood mononuclear cells (PBMCs) annotated 2 levels hierarchy. Usually, recommend building single-cell reference one dataset benchmarking different one. However, example, split cells training (reference) test (benchmarking) set. , also demonstrate deconvolution bulk reference. Benchmarking necessary step deconverse, feature can used compare different implemented methods data type decide levels annotation trustworthy.","code":""},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"load-pbmc-dataset","dir":"Articles","previous_headings":"","what":"Load PBMC dataset","title":"Introduction: full explained deconverse pipeline with PBMCs","text":"First, load dataset Seurat look provided data two levels annotation.  PBMCs annotated two levels, encoded variables Cell_major_identities Cell_minor_identities object metadata. UMAP divides cells three major clusters, corresponding Cell_major_identities refer first level annotation l1. broken finer-grained annotation second level annotation l2.","code":"library(Seurat) library(deconverse) library(patchwork)  data(pbmc) pbmc #> An object of class Seurat  #> 13714 features across 2625 samples within 1 assay  #> Active assay: RNA (13714 features, 2000 variable features) #>  2 dimensional reductions calculated: pca, umap ((DimPlot(pbmc, reduction = \"umap\", group.by = \"Cell_major_identities\", label = TRUE, label.size = 2.5) + NoLegend()) | (DimPlot(pbmc, group.by = \"Cell_minor_identities\", reduction = \"umap\", label = TRUE,  label.size = 2.5) + NoLegend())) &      theme(axis.title = element_text(size = 8),           axis.text = element_text(size = 8),           plot.title = element_text(size = 9))"},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"split-traintest","dir":"Articles","previous_headings":"","what":"Split train/test","title":"Introduction: full explained deconverse pipeline with PBMCs","text":"run reference benchmarking data, need split cells randomly training (60%) test (40%) sets.","code":"set.seed(0) ncells <- dim(pbmc)[2] train_ids <- sample(1:ncells, ncells*0.6) test_ids <- setdiff(1:ncells, train_ids)   pbmc_train <- pbmc[,train_ids] pbmc_test <- pbmc[,test_ids] ((DimPlot(pbmc_train, reduction = \"umap\", group.by = \"Cell_major_identities\", label = TRUE) + NoLegend()) | (DimPlot(pbmc_test, reduction = \"umap\", group.by = \"Cell_major_identities\", label = TRUE) + NoLegend())) &      theme(axis.title = element_text(size = 8),           axis.text = element_text(size = 8),           plot.title = element_text(size = 9))"},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"screference-build-single-cell-reference-from-train-data","dir":"Articles","previous_headings":"","what":"screference: Build single-cell reference from train data","title":"Introduction: full explained deconverse pipeline with PBMCs","text":"Now, ’re ready build reference hscreference object. use deconverse::new_hscreference give Seurat object pbmc_train, l1 l2 annotation variables order, project name, batch_id variable correspond patient another context, just value cells. object created, can used compute reference different methods. ’ll compute references DWLS (also used OLS SVR), svr AutoGeneS. available deconvolution methods, use deconvolution_methods(). compute references (grabbed cache): Now single-cell reference ready deconvolution! First, let’s benchmark test set.","code":"pbmc_ref <- new_hscreference(pbmc_train,                 annot_ids = c(\"Cell_major_identities\", \"Cell_minor_identities\"),                 project_name = \"pbmc_example\",                 batch_id = \"orig.ident\") #> Generating new `hscreference` object... #> Generating new `screference` object... #> Generating new `screference` object... pbmc_ref #> h-screference object named `pbmc_example` with 2 levels of annotation from 1575 cells #> population annotation tree:  #>                levelName #> 1  populations           #> 2   ¦--B                 #> 3   ¦   °--B             #> 4   ¦--Monocytic_lineage #> 5   ¦   ¦--CD14+ Mono    #> 6   ¦   ¦--DC            #> 7   ¦   °--FCGR3A+ Mono  #> 8   °--TNK               #> 9       ¦--CD8 T         #> 10      ¦--Memory CD4 T  #> 11      ¦--Naive CD4 T   #> 12      °--NK            #> cached results:  #> l1:   #> l2: # Optional: parallelize with Seurat library(future) options(future.globals.maxSize= 4000*1024^2) plan(\"multicore\", workers = 4) #> Warning in supportsMulticoreAndRStudio(...): [ONE-TIME WARNING] Forked #> processing ('multicore') is not supported when running R from RStudio because #> it is considered unstable. For more details, how to control forked processing #> or not, and how to silence this warning in future R sessions, see #> ?parallelly::supportsMulticore  # Compute references pbmc_ref <- pbmc_ref |>     compute_reference(\"dwls\") |>     compute_reference(\"autogenes\") #> Results found in cache, returning... #> Results found in cache, returning... #> Results found in cache, returning... #> Results found in cache, returning..."},{"path":[]},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"bounds","dir":"Articles","previous_headings":"scbench: Run benchmarking on test data","what":"Bounds","title":"Introduction: full explained deconverse pipeline with PBMCs","text":"Now, let’s build benchmarking set. First, need understand annotations relate build “bounds” pseudobulk simulations (don’t worry, explained). can see l1 B cells correspond l2 B cells; l1 Monocytic_lineage becomes l2 CD14+ Mono, FCGR3A+ Mono DC; l1 TNK splits l2 CD8 T, Memory CD4 T, Naive CD4 T NK. PBMCs, lymphocytes make 70-90% cells monocytes make 10-20%. want make pseudobulk mixtures resemble real PBMCs, include lymphocytes, particularly abundant T cells, monocytes. bounds . Bounds used create random mixtures controlled proportions. population, need lower upper bound. ’ll start l1 populations: ’ve set B cells make 10-20% mixtures, Monocytic lineage 10-30% TNK 50-85%. structure bounds always data.frame 3 columns (population, lower, upper). Make sure population names levels annotation table. Bounds finer levels l2 always given within context coarser grained annotation. example, Monocytic lineage split 3 populations. dendritic cells rare monocytes, can make rare mixtures well: Following logic, can bounds sub-populations TNK. ’s necessary B, since split sub-populations annotation. bounds put together list, names l1 coarsest-grained population {level}_{coarse_population_that_was_split} finer levels (e.g. l2_Monocytic_lineage ).","code":"table(pbmc_test$Cell_major_identities, pbmc_test$Cell_minor_identities) #>                     #>                       B CD14+ Mono CD8 T  DC FCGR3A+ Mono Memory CD4 T #>   B                 134          0     0   0            0            0 #>   Monocytic_lineage   0        198     0   9           71            0 #>   TNK                 0          0   121   0            0          180 #>                     #>                     Naive CD4 T  NK #>   B                           0   0 #>   Monocytic_lineage           0   0 #>   TNK                       277  60 l1_bounds <- data.frame(     population = c(\"B\", \"Monocytic_lineage\", \"TNK\"),     lower = c(0.1, 0.1, 0.5),     upper = c(0.2, 0.3, 0.85) ) unique(pbmc_test$Cell_major_identities) #> [1] \"B\"                 \"Monocytic_lineage\" \"TNK\" l2_mono_bounds <- data.frame(         population = c(\"CD14+ Mono\", \"FCGR3A+ Mono\", \"DC\"),         lower = c(0.3, 0.2, 0),         upper = c(0.8, 0.6, 0.2)     ) l2_tnk_bounds <- data.frame(         population = c(\"CD8 T\", \"Memory CD4 T\", \"Naive CD4 T\", \"NK\"),         lower = c(0.2, 0.2, 0.2, 0.1),         upper = c(0.5, 0.5, 0.5, 0.3)     ) pbmc_bounds <- list(     l1 = l1_bounds,     l2_TNK = l2_tnk_bounds,     l2_Monocytic_lineage = l2_mono_bounds  )"},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"create-the-scbench","dir":"Articles","previous_headings":"scbench: Run benchmarking on test data","what":"Create the scbench","title":"Introduction: full explained deconverse pipeline with PBMCs","text":"Now information need create benchmarking set. Variables similar creating screference, exception pop_bounds, explained . 3 main benchmarks tested scbench: population limit detection (lod) spillover population benchmark, pseudobulk mixtures created using random proportions constrained bounds. known proportions compared fractions estimated deconvolution methods assess accuracy. limit detection benchmark estimates low fraction particular population method able detect . spillover benchmark, cells different pairs populations level mixed increasing proportions evaluate whether methods can distinguish well . first step generate mixtures 3 different methods: , can generate pseudobulks mixtures mixing 100 random cells correspond proportions given mixtures. Finally, can call different methods deconvolute. screference, next steps go lot faster using cached results: , ’re demonstrating 6 methods currently implemented. full list, see deconvolution_methods().","code":"pbmc_bench <- new_scbench(pbmc_test,                           annot_ids = c(\"Cell_major_identities\",                                        \"Cell_minor_identities\"),                          pop_bounds = pbmc_bounds,                          project_name = \"pbmc_example\",                          batch_id = \"orig.ident\") #> Generating new `scbench` object... #> Joining with `by = join_by(l1)` pbmc_bench #> scbench object named pbmc_example with 11 reference populations and 2 levels of annotation #> Bounds [x] | Mixtures [ ] | Spillover [ ] | Limit of Detection [ ] | Pseudobulks [ ] pbmc_bench <- pbmc_bench |>     mixtures_population(nsamp = 500) |>     mixtures_lod() |>     mixtures_spillover() #> Simulating spillover mixtures between population pairs... #> Simulating limits of detection for each population... #> Simulating population mixtures given bounds... pbmc_bench <- pbmc_bench |>      pseudobulks(ncells = 1000) |>     deconvolute_all(pbmc_ref,                     methods = c(\"dwls\", \"svr\", \"ols\",                                 \"autogenes\", \"bisque\"))"},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"benchmarking-results","dir":"Articles","previous_headings":"scbench: Run benchmarking on test data","what":"Benchmarking results","title":"Introduction: full explained deconverse pipeline with PBMCs","text":"deconverse implements many functions produce many benchmarking plots, either single method summarizing comparing multiple methods.","code":""},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"evaluation-of-a-single-method","dir":"Articles","previous_headings":"scbench: Run benchmarking on test data > Benchmarking results","what":"Evaluation of a single method","title":"Introduction: full explained deconverse pipeline with PBMCs","text":", generate evaluation plots results coming dampened weighted least squares (dwls). plt_cors_scatter plots correlations deconvoluted pseudobulk portions found method true fractions.  plt_lod_scatter plots correlations pseudobulk mixtures increasing proportion one population limit detection established method.  plt_spillover_scatter plots spillover pair populations help identify pairs populations possibly confused two methods.  default, plots show benchmark finest grained annotation available. can verify coarser grained specifying level:","code":"plt_cors_scatter(pbmc_bench, method = \"dwls\") plt_lod_scatter(pbmc_bench, method = \"dwls\") plt_spillover_scatter(pbmc_bench, method = \"dwls\") plt_cors_scatter(pbmc_bench, method = \"dwls\", level = \"l1\")"},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"comparison-of-methods","dir":"Articles","previous_headings":"scbench: Run benchmarking on test data > Benchmarking results","what":" Comparison of methods","title":"Introduction: full explained deconverse pipeline with PBMCs","text":"also plots available compare performance data different methods. two main heatmaps compare correlation pseudobulk mixture proportions deconvoluted fractions population, root mean squared error (RMSE) predicted fraction real fraction.","code":""},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"population","dir":"Articles","previous_headings":"scbench: Run benchmarking on test data > Benchmarking results >  Comparison of methods","what":"Population","title":"Introduction: full explained deconverse pipeline with PBMCs","text":"","code":"plt_cor_heatmap(pbmc_bench, level = \"l2\")$heatmap plt_rmse_heatmap(pbmc_bench, level = \"l2\")$heatmap"},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"lod-and-spillover","dir":"Articles","previous_headings":"scbench: Run benchmarking on test data > Benchmarking results >  Comparison of methods","what":"LoD and Spillover","title":"Introduction: full explained deconverse pipeline with PBMCs","text":"Plots also available limit detection (lower better) spillover RMSE (lower better).","code":"plt_lod_heatmap(pbmc_bench)$heatmap #> Warning: Removed 2 rows containing missing values (`geom_text()`). plt_spillover_heatmap(pbmc_bench)$heatmap"},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"apply-to-real-pbmc-bulk-rna-seq","dir":"Articles","previous_headings":"","what":"Apply to real PBMC bulk RNA-seq","title":"Introduction: full explained deconverse pipeline with PBMCs","text":"demonstrate real-life usability deconverse, use example dataset bulk PBMCs.","code":""},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"download-data","dir":"Articles","previous_headings":"Apply to real PBMC bulk RNA-seq","what":"Download data","title":"Introduction: full explained deconverse pipeline with PBMCs","text":"First, download data keep PBMC bulk samples.","code":"library(GEOquery) #> Setting options('download.file.method.GEOquery'='auto') #> Setting options('GEOquery.inmemory.gpl'=FALSE) gset <- getGEO(\"GSE107011\")[[1]] #> Found 1 file(s) #> GSE107011_series_matrix.txt.gz samp_annot <- pData(gset) %>%     tibble() %>%     dplyr::filter(source_name_ch1 == \"PBMCs\") %>%     mutate(sample_name = str_remove(title, \"_rep.*$\"),            sample_name = ifelse(str_detect(sample_name, \"^\\\\d\"), paste0(\"X\", sample_name), sample_name)) curl::curl_download(\"https://ftp.ncbi.nlm.nih.gov/geo/series/GSE107nnn/GSE107011/suppl/GSE107011_Processed_data_TPM.txt.gz\", \"GSE107011_TPM.txt.gz\") gexp <- read.table(\"GSE107011_TPM.txt.gz\") gexp <- gexp[,samp_annot$sample_name] file.remove(\"GSE107011_TPM.txt.gz\") #> [1] TRUE"},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"get-gene-annotation","dir":"Articles","previous_headings":"Apply to real PBMC bulk RNA-seq","what":"Get gene annotation","title":"Introduction: full explained deconverse pipeline with PBMCs","text":"gene annotation provided, download add annotation version used pre-process data according documentation get gene symbols.","code":"library(biomaRt) ensembl <- useEnsembl(biomart = \"genes\",                        dataset = \"hsapiens_gene_ensembl\",                        version = 92) # ensembl <- useDataset(ensembl, \"genes\") gene_annot <- getBM(attributes = c(\"ensembl_gene_id_version\", \"hgnc_symbol\"),                     filters = \"ensembl_gene_id_version\",                     values = rownames(gexp),                     ensembl) gene_annot <- gene_annot %>%     group_by(hgnc_symbol) %>%     slice(1)  gexp <- gexp[gene_annot$ensembl_gene_id_version,] rownames(gexp) <- gene_annot$hgnc_symbol gexp <- as.matrix(gexp)  gexp[1:5,1:5] #>           CYFZ_PBMC  FY2H_PBMC FLWA_PBMC X453W_PBMC X684C_PBMC #>          50.0375670 40.8314400 47.712626 52.3128310 42.0131250 #> A1BG      3.6204560  2.0872830  3.764533  1.6394940  3.2648960 #> A1BG-AS1  9.4991300  4.1165860  5.104390  4.9634900 10.2330700 #> A1CF      0.0502166  0.0194841  0.019354  0.0580105  0.0387051 #> A2M      36.6396320 40.4233670 42.562249 67.0603100 22.8911690"},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"run-deconverse","dir":"Articles","previous_headings":"Apply to real PBMC bulk RNA-seq","what":"Run deconverse","title":"Introduction: full explained deconverse pipeline with PBMCs","text":"Now can run deconverse bulk PBMC dataset symbol identifiers reference previously calculated. Note: pbmc_bench necessary steps, serves benchmark different methods.","code":"deconv_res <- deconvolute_all(gexp, pbmc_ref,                                methods = c(\"autogenes\", \"bisque\", \"dwls\", \"ols\", \"svr\"))"},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"compare-results","dir":"Articles","previous_headings":"Apply to real PBMC bulk RNA-seq","what":"Compare results","title":"Introduction: full explained deconverse pipeline with PBMCs","text":"Now cal compare results two levels hierarchy.   see much higher correlation methods highest level annotation, expected.","code":"l1_results <- lapply(deconv_res, \"[[\", \"l1\") %>% bind_rows() l2_results <- lapply(deconv_res, \"[[\", \"l2\") %>% bind_rows() frac_names <- colnames(l1_results) %>% str_subset(\"^frac\")  all_frac_mat <- lapply(frac_names, function(frac) {     cell_type <- str_remove(frac, \"^frac_\")     l1_results %>%     pivot_wider(id_cols = \"sample\", names_from = \"method\", values_from = frac) %>%         mutate(sample = paste0(sample, \"_\", cell_type)) %>%     as.data.frame() }) %>%     bind_rows() %>%     column_to_rownames(\"sample\")  # install.packages(\"ggcorrplot\") ggcorrplot::ggcorrplot(cor(all_frac_mat), hc.order = TRUE) frac_names <- colnames(l2_results) %>% str_subset(\"^frac\")  all_frac_mat_l2 <- lapply(frac_names, function(frac) {     cell_type <- str_remove(frac, \"^frac_\")     l2_results %>%         pivot_wider(id_cols = \"sample\", names_from = \"method\", values_from = frac) %>%         mutate(sample = paste0(sample, \"_\", cell_type)) %>%         as.data.frame() }) %>%     bind_rows() %>%     column_to_rownames(\"sample\")  ggcorrplot::ggcorrplot(cor(all_frac_mat_l2, use = \"pair\"), hc.order = TRUE)"},{"path":"https://csgroen.github.io/deconverse/articles/intro_pbmc.html","id":"check-sample-deconvolution-by-a-method","dir":"Articles","previous_headings":"Apply to real PBMC bulk RNA-seq","what":"Check sample deconvolution by a method","title":"Introduction: full explained deconverse pipeline with PBMCs","text":"can verify results deconvolution plotting proportions:","code":"pivot_dwls_l1 <- l1_results %>%     filter(method == \"DWLS\") %>%     pivot_longer(cols = starts_with(\"frac\"), names_to = \"pop\", values_to = \"frac\") %>%     mutate(pop = str_remove(pop, \"frac_\") %>% factor(levels = c(\"B\", \"Monocytic_lineage\", \"TNK\")),            level = \"l1\")  pivot_dwls_l2 <- l2_results %>%     filter(method == \"DWLS\") %>%     pivot_longer(cols = starts_with(\"frac\"), names_to = \"pop\", values_to = \"frac\") %>%     mutate(pop = str_remove(pop, \"frac_\") %>% factor(levels = c(\"B\", \"CD14+ Mono\", \"DC\",                                                                 \"FCGR3A+ Mono\", \"CD8 T\",                                                                 \"Memory CD4 T\", \"Naive CD4 T\",                                                                 \"NK\")),            level = \"l2\")  pop_order <- pivot_dwls_l1 %>% filter(pop == \"TNK\") %>% arrange(frac) %>% pull(sample)  l1_plt <- pivot_dwls_l1 %>%     mutate(sample = factor(sample, levels = pop_order)) %>%     ggplot(aes(sample, frac, fill = pop)) +     geom_col(color = \"black\", size = 0.2) +     geom_hline(yintercept = c(0.25, 0.5, 0.75), lty = \"dashed\") +     ggheatmapper::theme_scatter() +     labs(title = \"l1\", y = \"fraction\", fill = \"population\") +     theme(axis.text.x = element_blank(),           axis.title.x = element_blank(),           axis.ticks.x = element_blank()) #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated.  l2_plt <- pivot_dwls_l2 %>%     mutate(sample = factor(sample, levels = pop_order)) %>%     ggplot(aes(sample, frac, fill = pop)) +     geom_col(color = \"black\", size = 0.2) +     geom_hline(yintercept = c(0.25, 0.5, 0.75), lty = \"dashed\") +     ggheatmapper::theme_scatter() +     labs(title = \"l2\", y = \"fraction\", fill = \"population\") +     theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))  l1_plt / l2_plt"},{"path":"https://csgroen.github.io/deconverse/articles/pdac_tutorial.html","id":"context","dir":"Articles","previous_headings":"","what":"Context","title":"Benchmarking example with pancreatic cancer data","text":"’ll use example data pancreatic cancer multiple datasets, annotated less categories challenge methods implemented deconverse package.","code":"library(deconverse)"},{"path":"https://csgroen.github.io/deconverse/articles/pdac_tutorial.html","id":"example-reference-dataset-cra001160","dir":"Articles","previous_headings":"","what":"Example reference dataset: CRA001160","title":"Benchmarking example with pancreatic cancer data","text":"chose two pancreatic adenocarcinoma single-cell datasets reference test dataset examples. CRA001160, biggest dataset, used train references.","code":""},{"path":"https://csgroen.github.io/deconverse/articles/pdac_tutorial.html","id":"download","dir":"Articles","previous_headings":"Example reference dataset: CRA001160","what":"Download","title":"Benchmarking example with pancreatic cancer data","text":"First, need download expression data cell metadata repository.","code":"download_file <- function(link, fname) {   if(!file.exists(fname)) {     old_timeout <- getOption('timeout')     options(timeout=1e6)     message(\"Downloading data...\")     download.file(link, fname)     options(timeout=old_timeout)   } else {     message(\"File \", fname, \" found, skipping download...\")   } }  # Source: http://tisch.comp-genomics.org/gallery/?cancer=PAAD&celltype=&species= dir.create(\"data\", showWarnings = FALSE) download_file(\"https://biostorage.s3.ap-northeast-2.amazonaws.com/TISCH_2022/PAAD_CRA001160/PAAD_CRA001160_expression.h5\",               \"data/PAAD_CRA001160_expression.h5\") download_file(\"http://tisch.comp-genomics.org/static/data/PAAD_CRA001160/PAAD_CRA001160_CellMetainfo_table.tsv\",               \"data/PAAD_CRA001160_CellMetainfo_table.tsv\")"},{"path":"https://csgroen.github.io/deconverse/articles/pdac_tutorial.html","id":"read-data","dir":"Articles","previous_headings":"Example reference dataset: CRA001160","what":"Read data","title":"Benchmarking example with pancreatic cancer data","text":"Now, can read objects R create Seurat object. cells dataset already quality control steps.","code":"library(Seurat) library(tidyverse) sc_paad_mat <- Read10X_h5(\"data/PAAD_CRA001160_expression.h5\", use.names = TRUE, unique.features = TRUE) sc_paad_meta <- read_tsv(\"data/PAAD_CRA001160_CellMetainfo_table.tsv\") sc_paad_meta <- sc_paad_meta %>%   rename_with(~ str_replace_all(., \" |\\\\-|\\\\_\", \".\") %>% str_remove_all(\"\\\\(|\\\\)\")) %>%   as.data.frame() %>%   column_to_rownames(\"Cell\") %>%   .[colnames(sc_paad_mat),] so_paad <- CreateSeuratObject(counts = sc_paad_mat, project = \"PAAD\",                                meta.data = sc_paad_meta) so_paad <- NormalizeData(so_paad) rm(sc_paad_mat); gc() ##             used   (Mb) gc trigger   (Mb)  max used   (Mb) ## Ncells   9040035  482.8   16477544  880.0  14787020  789.8 ## Vcells 443731842 3385.5  790206948 6028.9 657297598 5014.8"},{"path":"https://csgroen.github.io/deconverse/articles/pdac_tutorial.html","id":"visualize-annotations","dir":"Articles","previous_headings":"Example reference dataset: CRA001160","what":"Visualize annotations","title":"Benchmarking example with pancreatic cancer data","text":"can visualize provided annotations using Seurat object. Cell identities provided 3 levels hierarchy: \"Celltype.malignancy\", \"Celltype.major.lineage\" \"Celltype.minor.lineage\" .  can visualize cell annotations map different levels hierarchy: also fix names might pose problems downstream analyses, either differ datasets (CD8Tex instead just CD8T) contain special characters can generate problems formulas (like Mono/Macro).","code":"library(patchwork) plt_paad_umap <- function(so, color_var) {   ggplot(so@meta.data, aes(UMAP.1, UMAP.2, color = !! sym(color_var))) +   geom_point(size = 0.1) +   theme_linedraw() +   labs(title = color_var) } annot1 <- plt_paad_umap(so_paad, \"Celltype.malignancy\") + scale_color_brewer(type = \"qual\") annot2 <- plt_paad_umap(so_paad, \"Celltype.major.lineage\") annot3 <- plt_paad_umap(so_paad, \"Celltype.minor.lineage\")  ((annot1 | annot2 | annot3) & guides(color = guide_legend(override.aes = list(size = 3), ncol = 3))) + plot_layout(guides = \"collect\") with(so_paad@meta.data, table(Celltype.malignancy, Celltype.major.lineage)) ##                    Celltype.major.lineage ## Celltype.malignancy Acinar     B CD8Tex    DC Ductal Endocrine Endothelial ##     Immune cells         0  1137   4572  2139      0         0           0 ##     Malignant cells      0     0      0     0      0         0           0 ##     Others            2018     0      0     0  10205       620           0 ##     Stromal cells        0     0      0     0      0         0        9106 ##                    Celltype.major.lineage ## Celltype.malignancy Fibroblasts Malignant Mono/Macro Plasma Stellate ##     Immune cells              0         0       3327    479        0 ##     Malignant cells           0     11401          0      0        0 ##     Others                    0         0          0      0     5265 ##     Stromal cells          7174         0          0      0        0 with(so_paad@meta.data, table(Celltype.major.lineage, Celltype.minor.lineage)) ##                       Celltype.minor.lineage ## Celltype.major.lineage Acinar     B CD8Tex Ductal Endocrine Endothelial ##            Acinar        2018     0      0      0         0           0 ##            B                0  1137      0      0         0           0 ##            CD8Tex           0     0   4572      0         0           0 ##            DC               0     0      0      0         0           0 ##            Ductal           0     0      0  10205         0           0 ##            Endocrine        0     0      0      0       620           0 ##            Endothelial      0     0      0      0         0        9106 ##            Fibroblasts      0     0      0      0         0           0 ##            Malignant        0     0      0      0         0           0 ##            Mono/Macro       0     0      0      0         0           0 ##            Plasma           0     0      0      0         0           0 ##            Stellate         0     0      0      0         0           0 ##                       Celltype.minor.lineage ## Celltype.major.lineage Fibroblasts    M1 Malignant Monocyte   pDC Plasma ##            Acinar                0     0         0        0     0      0 ##            B                     0     0         0        0     0      0 ##            CD8Tex                0     0         0        0     0      0 ##            DC                    0     0         0        0  2139      0 ##            Ductal                0     0         0        0     0      0 ##            Endocrine             0     0         0        0     0      0 ##            Endothelial           0     0         0        0     0      0 ##            Fibroblasts        7174     0         0        0     0      0 ##            Malignant             0     0     11401        0     0      0 ##            Mono/Macro            0   393         0     2934     0      0 ##            Plasma                0     0         0        0     0    479 ##            Stellate              0     0         0        0     0      0 ##                       Celltype.minor.lineage ## Celltype.major.lineage Stellate ##            Acinar             0 ##            B                  0 ##            CD8Tex             0 ##            DC                 0 ##            Ductal             0 ##            Endocrine          0 ##            Endothelial        0 ##            Fibroblasts        0 ##            Malignant          0 ##            Mono/Macro         0 ##            Plasma             0 ##            Stellate        5265 so_paad@meta.data$Celltype.major.lineage[so_paad@meta.data$Celltype.major.lineage == \"Mono/Macro\"] <- \"Mono_Macro\" so_paad@meta.data$Celltype.major.lineage[so_paad@meta.data$Celltype.major.lineage == \"CD8Tex\"] <- \"CD8T\" so_paad@meta.data$Celltype.minor.lineage[so_paad@meta.data$Celltype.minor.lineage == \"CD8Tex\"] <- \"CD8T\""},{"path":"https://csgroen.github.io/deconverse/articles/pdac_tutorial.html","id":"create-hscreference-with-deconverse","dir":"Articles","previous_headings":"Example reference dataset: CRA001160","what":"Create hscreference with deconverse","title":"Benchmarking example with pancreatic cancer data","text":"","code":"paad_ref <- new_hscreference(so_paad,                                 project_name = \"paad_example\",                                annot_ids = c(\"Celltype.malignancy\", \"Celltype.major.lineage\", \"Celltype.minor.lineage\"),                                batch_id = \"Patient\",                                seed = 0)"},{"path":"https://csgroen.github.io/deconverse/articles/pdac_tutorial.html","id":"compute-references-for-different-methods","dir":"Articles","previous_headings":"Example reference dataset: CRA001160","what":"Compute references for different methods","title":"Benchmarking example with pancreatic cancer data","text":"","code":"paad_ref <- paad_ref %>%   compute_reference(\"dwls\") %>%   compute_reference(\"autogenes\") paad_ref ## h-screference object named `paad_example` with 3 levels of annotation from 57443 cells ## population annotation tree:  ##                       levelName ## 1  populations                  ## 2   ¦--Immune cells             ## 3   ¦   ¦--B                    ## 4   ¦   ¦   °--B                ## 5   ¦   ¦--CD8T                 ## 6   ¦   ¦   °--CD8T             ## 7   ¦   ¦--DC                   ## 8   ¦   ¦   °--pDC              ## 9   ¦   ¦--Mono_Macro           ## 10  ¦   ¦   ¦--M1               ## 11  ¦   ¦   °--Monocyte         ## 12  ¦   °--Plasma               ## 13  ¦       °--Plasma           ## 14  ¦--Malignant cells          ## 15  ¦   °--... 1 nodes w/ 1 sub ## 16  °--... 2 nodes w/ 14 sub    ## cached results:  ## l1:  dwls, autogenes ## l2:  dwls, autogenes ## l3:  dwls, autogenes"},{"path":"https://csgroen.github.io/deconverse/articles/pdac_tutorial.html","id":"example-benchmarking-dataset-gse154778","dir":"Articles","previous_headings":"","what":"Example benchmarking dataset: GSE154778","title":"Benchmarking example with pancreatic cancer data","text":"’ll use different single-cell dataset similar annotations benchmark dataset. dataset doesn’t feature cell types reference, benchmark limited cell types present test dataset. However, reference also contains cell types, also get see methods perform confounding cell types reference. ’re still working : (1) adding confounding cell types mixture present reference assessing behavior different methods; (2) effectively evaluating performance methods cell types reference benchmarking mixture. Case (2) allowed scbench currently, case (1) .e. cells types benchmark must reference.","code":""},{"path":"https://csgroen.github.io/deconverse/articles/pdac_tutorial.html","id":"download-1","dir":"Articles","previous_headings":"Example benchmarking dataset: GSE154778","what":"Download","title":"Benchmarking example with pancreatic cancer data","text":"","code":"download_file(\"https://biostorage.s3.ap-northeast-2.amazonaws.com/TISCH_2022/PAAD_GSE141017/PAAD_GSE141017_expression.h5\",               \"data/PAAD_GSE141017_expression.h5\") download_file(\"http://tisch.comp-genomics.org/static/data/PAAD_GSE141017/PAAD_GSE141017_CellMetainfo_table.tsv\",               \"data/PAAD_GSE141017_CellMetainfo_table.tsv\")"},{"path":"https://csgroen.github.io/deconverse/articles/pdac_tutorial.html","id":"read-data-1","dir":"Articles","previous_headings":"Example benchmarking dataset: GSE154778","what":"Read data","title":"Benchmarking example with pancreatic cancer data","text":"","code":"library(Seurat) library(tidyverse) sc_paad_mat2 <- Read10X_h5(\"data/PAAD_GSE141017_expression.h5\", use.names = TRUE, unique.features = TRUE) sc_paad_meta2 <- read_tsv(\"data/PAAD_GSE141017_CellMetainfo_table.tsv\") sc_paad_meta2 <- sc_paad_meta2 %>%   rename_with(~ str_replace_all(., \" |\\\\-|\\\\_\", \".\") %>% str_remove_all(\"\\\\(|\\\\)\")) %>%   as.data.frame() %>%   column_to_rownames(\"Cell\") %>%   .[colnames(sc_paad_mat2),] so_paad2 <- CreateSeuratObject(counts = sc_paad_mat2, project = \"PAAD_bench\",                                meta.data = sc_paad_meta2) so_paad2 <- NormalizeData(so_paad2)"},{"path":"https://csgroen.github.io/deconverse/articles/pdac_tutorial.html","id":"visualize-populations","dir":"Articles","previous_headings":"Example benchmarking dataset: GSE154778","what":"Visualize populations","title":"Benchmarking example with pancreatic cancer data","text":"see fewer populations test set reference dataset. slightly different names “CD8Tcm”, ’ll fix :","code":"library(patchwork) annot1 <- plt_paad_umap(so_paad2, \"Celltype.malignancy\") + scale_color_brewer(type = \"qual\") annot2 <- plt_paad_umap(so_paad2, \"Celltype.major.lineage\") annot3 <- plt_paad_umap(so_paad2, \"Celltype.minor.lineage\")  ((annot1 | annot2 | annot3) & guides(color = guide_legend(override.aes = list(size = 3), ncol = 3))) + plot_layout(guides = \"collect\") so_paad2@meta.data$Celltype.minor.lineage[so_paad2@meta.data$Celltype.minor.lineage == \"CD8Tcm\"] <- \"CD8T\" so_paad2@meta.data$Celltype.major.lineage[so_paad2@meta.data$Celltype.major.lineage == \"Mono/Macro\"] <- \"Mono_Macro\""},{"path":"https://csgroen.github.io/deconverse/articles/pdac_tutorial.html","id":"create-scbench","dir":"Articles","previous_headings":"Example benchmarking dataset: GSE154778","what":"Create scbench","title":"Benchmarking example with pancreatic cancer data","text":"PDACs tumors low cellularity, generate mixtures varying levels cellularity (10-60%) high stromal content.","code":"paad_bounds <- list(   l1 = data.frame(     population = c(\"Malignant cells\", \"Immune cells\", \"Stromal cells\"),     lower = c(0.1, 0, 0.4),     upper = c(0.6, 0.2, 0.9)   ),   `l2_Immune cells` = data.frame(     population = c(\"CD8T\", \"Mono_Macro\"),     lower = c(0.3, 0.3),     upper = c(0.8, 0.7)   ),   `l3_Mono_Macro` = data.frame(     population = c(\"M1\", \"Monocyte\"),     lower = c(0.3, 0.3),     upper = c(0.7, 0.7)   ) ) paad_bench <- new_scbench(so_paad2,                           annot_ids = c(\"Celltype.malignancy\", \"Celltype.major.lineage\", \"Celltype.minor.lineage\"),                           pop_bounds = paad_bounds,                           project_name = \"paad_example\",                           batch_id = \"Patient\")"},{"path":"https://csgroen.github.io/deconverse/articles/pdac_tutorial.html","id":"benchmark","dir":"Articles","previous_headings":"Example benchmarking dataset: GSE154778","what":"Benchmark","title":"Benchmarking example with pancreatic cancer data","text":"","code":"paad_bench <- paad_bench %>%   mixtures_population(nsamps = 500, seed = 0) %>%   mixtures_spillover() %>%   mixtures_lod()  paad_bench <- paad_bench %>%   pseudobulks(ncells = 1000, seed = 0, ncores = 8, by_batch = FALSE) %>%     deconvolute_all(paad_ref, methods = c(\"dwls\", \"svr\", \"ols\", \"autogenes\"))"},{"path":"https://csgroen.github.io/deconverse/articles/pdac_tutorial.html","id":"plot-results","dir":"Articles","previous_headings":"Example benchmarking dataset: GSE154778","what":"Plot results","title":"Benchmarking example with pancreatic cancer data","text":"AutoGeneS method capable detecting M1 macrophages. SVR, DWLS OLS use reference, problem probably comes inability DWLS find specific M1 markers.  spite , SVR still overall smallest estimation error:  DWLS best spillover performance fails significantly assessing M1 vs Monocytes.  SVR lowest limits detection, exception M1 vs Monocytes, fails.  consider l2 level (Monocytes Macrophages grouped together), AutoGeneS lowest limits detection","code":"plt_cor_heatmap(paad_bench)$heatmap plt_cors_scatter(paad_bench, method = \"svr\") plt_rmse_heatmap(paad_bench)$heatmap plt_spillover_heatmap(paad_bench)$heatmap plt_lod_heatmap(paad_bench)$heatmap plt_lod_heatmap(paad_bench, level = \"l2\")$heatmap"},{"path":"https://csgroen.github.io/deconverse/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Clarice S Groeneveld. Maintainer.","code":""},{"path":"https://csgroen.github.io/deconverse/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Groeneveld CS (2023). deconverse: Bulk deconvolution methods single-cell references. R package version 0.2.4.","code":"@Manual{,   title = {deconverse: Bulk deconvolution methods from single-cell references},   author = {Clarice S Groeneveld},   year = {2023},   note = {R package version 0.2.4}, }"},{"path":"https://csgroen.github.io/deconverse/index.html","id":"deconverse-bulk-rna-seq-deconvolution-benchmark-using-single-cell-reference-profiles-","dir":"","previous_headings":"","what":"deconverse: bulk RNA-seq deconvolution benchmark using single-cell reference profiles","title":"Bulk deconvolution methods from single-cell references","text":"Note: package still immature, APIs yet well documented may change","code":""},{"path":"https://csgroen.github.io/deconverse/index.html","id":"installation","dir":"","previous_headings":"deconverse: bulk RNA-seq deconvolution benchmark using single-cell reference profiles","what":"Installation","title":"Bulk deconvolution methods from single-cell references","text":"install, run: docker singularity must available run deconvolution methods. install, see: https://docs.docker.com/get-docker/ install CIBERSORTx docker, run:","code":"remotes::install_github(\"csgroen/ggheatmapper\") remotes::install_github(\"jamesotto852/ggdensity\") remotes::install_github(\"Danko-Lab/BayesPrism/BayesPrism\") remotes::install_github(\"csgroen/deconverse\") library(deconverse) install_cibersortx()"},{"path":"https://csgroen.github.io/deconverse/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Bulk deconvolution methods from single-cell references","text":"See PBMC tutorial get started.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/autogenes_deconvolute.html","id":null,"dir":"Reference","previous_headings":"","what":"AutoGeneS deconvolution of bulk data using an `screference` — autogenes_deconvolute","title":"AutoGeneS deconvolution of bulk data using an `screference` — autogenes_deconvolute","text":"AutoGeneS deconvolution bulk data using `screference`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/autogenes_deconvolute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AutoGeneS deconvolution of bulk data using an `screference` — autogenes_deconvolute","text":"","code":"autogenes_deconvolute(   bulk_data,   scref,   model = c(\"nusvr\", \"nnls\", \"linear\")[1] )"},{"path":"https://csgroen.github.io/deconverse/reference/autogenes_deconvolute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AutoGeneS deconvolution of bulk data using an `screference` — autogenes_deconvolute","text":"bulk_data matrix genes--samples bulk mixtures scref object class `screference` model model run AutoGeneS. One : `'nusvr'`, `'nnls'` `'linear'`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/autogenes_deconvolute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AutoGeneS deconvolution of bulk data using an `screference` — autogenes_deconvolute","text":"tibble deconvolution fractions","code":""},{"path":"https://csgroen.github.io/deconverse/reference/autogenes_deconvolute.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"AutoGeneS deconvolution of bulk data using an `screference` — autogenes_deconvolute","text":"Reference: Aliee, Hananeh, Fabian J. Theis. 2021. “AutoGeneS: Automatic Gene Selection Using Multi-Objective Optimization RNA-Seq Deconvolution.” Cell Systems 12 (7): 706-715.e4. https://doi.org/10.1016/j.cels.2021.05.006. See also: https://github.com/theislab/AutoGeneS","code":""},{"path":"https://csgroen.github.io/deconverse/reference/autogenes_scref.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute reference matrix from an `screference` object using\nAutoGeneS — autogenes_scref","title":"Compute reference matrix from an `screference` object using\nAutoGeneS — autogenes_scref","text":"Compute reference matrix `screference` object using AutoGeneS","code":""},{"path":"https://csgroen.github.io/deconverse/reference/autogenes_scref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute reference matrix from an `screference` object using\nAutoGeneS — autogenes_scref","text":"","code":"autogenes_scref(   scref,   ngen = 500,   mode = \"standard\",   nfeatures = 2000,   seed = 0,   population_size = 100,   offspring_size = 50,   crossover_pb = 0.7,   mutation_pb = 0.3,   crossover_thresh = 1000,   int_standard_pb = 0.1,   ... )"},{"path":"https://csgroen.github.io/deconverse/reference/autogenes_scref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute reference matrix from an `screference` object using\nAutoGeneS — autogenes_scref","text":"scref object class `screference` ngen integer, number generations optimization mode one `\"standard\"` `\"fixed\"`. \"fixed\", `\"nfeatures\"` used. nfeatures integer, number genes selected fixed mode. seed int, reproducibility population_size int, size generation (mu parameter) offspring_size int, number individuals per generation (lambda parameter) crossover_pb float, crossover probability mutation_pb float, mutation probability ... passed [Seurat::FindVariableFeatures] crossover_thres int, crossover threshold (standard mode) ind_standard_pb float, probability used generate initial population standard mode","code":""},{"path":"https://csgroen.github.io/deconverse/reference/autogenes_scref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute reference matrix from an `screference` object using\nAutoGeneS — autogenes_scref","text":"screference object updated AutoGeneS reference centroids","code":""},{"path":"https://csgroen.github.io/deconverse/reference/autogenes_scref.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute reference matrix from an `screference` object using\nAutoGeneS — autogenes_scref","text":"Reference: Aliee, Hananeh, Fabian J. Theis. 2021. “AutoGeneS: Automatic Gene Selection Using Multi-Objective Optimization RNA-Seq Deconvolution.” Cell Systems 12 (7): 706-715.e4. https://doi.org/10.1016/j.cels.2021.05.006. See also: https://github.com/theislab/AutoGeneS","code":""},{"path":"https://csgroen.github.io/deconverse/reference/bayesprism_deconvolute.html","id":null,"dir":"Reference","previous_headings":"","what":"BayesPrism deconvolution of bulk data using an `screference` — bayesprism_deconvolute","title":"BayesPrism deconvolution of bulk data using an `screference` — bayesprism_deconvolute","text":"BayesPrism deconvolution bulk data using `screference`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/bayesprism_deconvolute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BayesPrism deconvolution of bulk data using an `screference` — bayesprism_deconvolute","text":"","code":"bayesprism_deconvolute(   bulk_data,   scref,   cache_path = NULL,   outlier_cut = 0.01,   outlier_fraction = 0.1,   pseudo_min = 1e-08,   ncores = parallel::detectCores()/2 )"},{"path":"https://csgroen.github.io/deconverse/reference/bayesprism_deconvolute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BayesPrism deconvolution of bulk data using an `screference` — bayesprism_deconvolute","text":"bulk_data matrix genes--samples bulk mixtures scref object class `screference` cache_path path cache results outlier_cut, outlier.fraction two floats used filter genes `bulk_data` whose expression fraction greater outlier.cut outlier.fraction. Typically dataset reasonable quality control, genes filtered. Removal outlier genes ensure inference dominated outliers, sometimes may resulted poor QC mapping. See: [BayesPrism::new.prism()] pseudo_min float, desired minimum value replace zero normalization. See: [BayesPrism::new.prism()]. n_cores number cores used computation","code":""},{"path":"https://csgroen.github.io/deconverse/reference/bayesprism_deconvolute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BayesPrism deconvolution of bulk data using an `screference` — bayesprism_deconvolute","text":"tibble deconvolution fractions","code":""},{"path":"https://csgroen.github.io/deconverse/reference/bayesprism_deconvolute.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"BayesPrism deconvolution of bulk data using an `screference` — bayesprism_deconvolute","text":"Reference: Chu, T., Wang, Z., Pe’er, D. et al. Cell type gene expression deconvolution BayesPrism enables Bayesian integrative analysis across bulk single-cell RNA sequencing oncology. Nat Cancer 3, 505–517 (2022). https://doi-org.insb.bib.cnrs.fr/10.1038/s43018-022-00356-3 See also: https://github.com/Danko-Lab/BayesPrism","code":""},{"path":"https://csgroen.github.io/deconverse/reference/bayesprism_scref.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute reference matrix from an `screference` object using\nBayesPrism — bayesprism_scref","title":"Compute reference matrix from an `screference` object using\nBayesPrism — bayesprism_scref","text":"Compute reference matrix `screference` object using BayesPrism","code":""},{"path":"https://csgroen.github.io/deconverse/reference/bayesprism_scref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute reference matrix from an `screference` object using\nBayesPrism — bayesprism_scref","text":"","code":"bayesprism_scref(   scref,   cache_path = \"bayes_prism\",   data_type = c(\"10X\", \"Smart-seq\")[1],   malignant_pop_id = NULL,   pval_cutoff = 0.01,   logFC_cutoff = 0.1,   ncores = parallel::detectCores()/2 )"},{"path":"https://csgroen.github.io/deconverse/reference/bayesprism_scref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute reference matrix from an `screference` object using\nBayesPrism — bayesprism_scref","text":"scref object class `screference` cache_path path cache results data_type string, one : `\"10X\"` `\"Smart-seq\"` malignant_pop_id ID screference `annot_id` corresponding malignant cell population deconvolution cancer samples. none populations malignant, leave `NULL`. pval_cutoff float, p-value cutoff differential expression analysis selection markers logFC_cutoff float, cutoff log fold-change differential expression analysis populations selection markers n_cores number cores used computation","code":""},{"path":"https://csgroen.github.io/deconverse/reference/bayesprism_scref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute reference matrix from an `screference` object using\nBayesPrism — bayesprism_scref","text":"screference object updated BayesPrism reference","code":""},{"path":"https://csgroen.github.io/deconverse/reference/bayesprism_scref.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute reference matrix from an `screference` object using\nBayesPrism — bayesprism_scref","text":"Reference: Chu, T., Wang, Z., Pe’er, D. et al. Cell type gene expression deconvolution BayesPrism enables Bayesian integrative analysis across bulk single-cell RNA sequencing oncology. Nat Cancer 3, 505–517 (2022). https://doi-org.insb.bib.cnrs.fr/10.1038/s43018-022-00356-3 See also: https://github.com/Danko-Lab/BayesPrism","code":""},{"path":"https://csgroen.github.io/deconverse/reference/bisque_deconvolute.html","id":null,"dir":"Reference","previous_headings":"","what":"Bisque deconvolution of bulk data using an `screference` — bisque_deconvolute","title":"Bisque deconvolution of bulk data using an `screference` — bisque_deconvolute","text":"Bisque deconvolution bulk data using `screference`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/bisque_deconvolute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bisque deconvolution of bulk data using an `screference` — bisque_deconvolute","text":"","code":"bisque_deconvolute(bulk_data, scref)"},{"path":"https://csgroen.github.io/deconverse/reference/bisque_deconvolute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bisque deconvolution of bulk data using an `screference` — bisque_deconvolute","text":"bulk_data matrix bulk RNA-seq data rows representing genes columns representing samples. scref object class `screference`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/bisque_deconvolute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bisque deconvolution of bulk data using an `screference` — bisque_deconvolute","text":"tibble containing fraction cell type bulk sample.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/bisque_deconvolute.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bisque deconvolution of bulk data using an `screference` — bisque_deconvolute","text":"Reference: Jew, B., Alvarez, M., Rahmani, E. et al. Accurate estimation cell composition bulk expression robust integration single-cell information. Nat Commun 11, 1971 (2020). https://doi.org/10.1038/s41467-020-15816-6 See also: https://github.com/cozygene/bisque","code":""},{"path":"https://csgroen.github.io/deconverse/reference/cibersortx_deconvolute.html","id":null,"dir":"Reference","previous_headings":"","what":"CIBERSORTx deconvolution of bulk data using an `screference` — cibersortx_deconvolute","title":"CIBERSORTx deconvolution of bulk data using an `screference` — cibersortx_deconvolute","text":"CIBERSORTx deconvolution bulk data using `screference`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/cibersortx_deconvolute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CIBERSORTx deconvolution of bulk data using an `screference` — cibersortx_deconvolute","text":"","code":"cibersortx_deconvolute(   bulk_data,   scref,   cache_path = \"cibersortx\",   username = NULL,   token = NULL )"},{"path":"https://csgroen.github.io/deconverse/reference/cibersortx_deconvolute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CIBERSORTx deconvolution of bulk data using an `screference` — cibersortx_deconvolute","text":"bulk_data matrix genes--samples bulk mixtures scref object class `screference` cache_path path cache deconvolution results username username used authenticate access CIBERSORTx method. See: https://cibersortx.stanford.edu/getoken.php token token used authenticate access CIBERSORTx method tibble deconvolution fractions","code":""},{"path":"https://csgroen.github.io/deconverse/reference/cibersortx_scref.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute reference signature matrix from `screference` object using\nmethod implemented in CIBERSORTx — cibersortx_scref","title":"Compute reference signature matrix from `screference` object using\nmethod implemented in CIBERSORTx — cibersortx_scref","text":"Compute reference signature matrix `screference` object using method implemented CIBERSORTx","code":""},{"path":"https://csgroen.github.io/deconverse/reference/cibersortx_scref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute reference signature matrix from `screference` object using\nmethod implemented in CIBERSORTx — cibersortx_scref","text":"","code":"cibersortx_scref(   scref,   cache_path = \"cibersortx\",   username = NULL,   token = NULL )"},{"path":"https://csgroen.github.io/deconverse/reference/cibersortx_scref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute reference signature matrix from `screference` object using\nmethod implemented in CIBERSORTx — cibersortx_scref","text":"scref object `screference cache_path path cache results username username used authenticate access CIBERSORTx method. See: https://cibersortx.stanford.edu/getoken.php token token used authenticate access CIBERSORTx method","code":""},{"path":"https://csgroen.github.io/deconverse/reference/cibersortx_scref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute reference signature matrix from `screference` object using\nmethod implemented in CIBERSORTx — cibersortx_scref","text":"path cached signature matrix","code":""},{"path":"https://csgroen.github.io/deconverse/reference/compute_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute reference given a deconvolution method from an `screference` object — compute_reference.screference","title":"Compute reference given a deconvolution method from an `screference` object — compute_reference.screference","text":"Compute reference given deconvolution method `screference` object Compute reference given deconvolution method `h-screference` object","code":""},{"path":"https://csgroen.github.io/deconverse/reference/compute_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute reference given a deconvolution method from an `screference` object — compute_reference.screference","text":"","code":"# S3 method for screference compute_reference(scref, method = deconvolution_methods()[1], ...)  # S3 method for hscreference compute_reference(hscref, method = deconvolution_methods()[1], ...)"},{"path":"https://csgroen.github.io/deconverse/reference/compute_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute reference given a deconvolution method from an `screference` object — compute_reference.screference","text":"scref `screference` object method string, one `deconvolution_methods()` ... passed deconvolution method's reference computation function. See wrapper (`(method)_scref`) `(method)` method name parameters. hscref `h-screference` object","code":""},{"path":"https://csgroen.github.io/deconverse/reference/compute_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute reference given a deconvolution method from an `screference` object — compute_reference.screference","text":"object class `screference` object class `hscreference`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/deconverse-package.html","id":null,"dir":"Reference","previous_headings":"","what":"deconverse: Bulk deconvolution methods from single-cell references — deconverse-package","title":"deconverse: Bulk deconvolution methods from single-cell references — deconverse-package","text":"package implements wrappers methods bulk RNA-seq deconvolution using single-cell data build cell population profiles. Using pseudobulk simulations, deconverse also allows benchmarking comparing different deconvolution methods context-specific manner.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/deconvolute.html","id":null,"dir":"Reference","previous_headings":"","what":"Deconvolute `scbench` object using a chosen method — deconvolute.scbench","title":"Deconvolute `scbench` object using a chosen method — deconvolute.scbench","text":"Deconvolute `scbench` object using chosen method Deconvolute bulk RNA-seq matrix using chosen method","code":""},{"path":"https://csgroen.github.io/deconverse/reference/deconvolute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deconvolute `scbench` object using a chosen method — deconvolute.scbench","text":"","code":"# S3 method for scbench deconvolute(   scbench,   scref,   method = deconvolution_methods()[1],   type = c(\"population\", \"spillover\", \"lod\")[1],   pseudobulk_norm = c(\"rpm\", \"none\", \"proportional_fitting\")[3],   correct_finer = TRUE,   ... )  # S3 method for matrix deconvolute(   bulk_data,   scref,   method = deconvolution_methods()[1],   bulk_norm = c(\"none\", \"rpm\", \"proportional_fitting\")[1],   correct_finer = TRUE,   ... )"},{"path":"https://csgroen.github.io/deconverse/reference/deconvolute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deconvolute `scbench` object using a chosen method — deconvolute.scbench","text":"scbench `scbench` object already processed `pseudobulks` scref `screference` object containing single-cell reference data pre-computed references methods require . method string name deconvolution method. available methods, consult `deconvolution_methods()` type type mixtures deconvolute. One : `\"population\"`, `\"spillover\"` `\"lod\"` pseudobulk_norm normalization method pseudobulk counts. One : `\"rpm\"` reads per million, `\"none\"` raw counts, `\"proportional_fitting\"` using mean library size pseudobulk data normalize. correct_finer normalize resulting fractions finer-grained annotation using coarser-grained results ... parameters, passed method wrapper, enables user change method parameters. See: `deconvolute_method` `method` method name lowercase method-specific parameters bulk_data count linear-normalized (cpm, etc) matrix genes--samples bulk_norm normalization applied bulk data. One : `\"rpm\"` reads per million, `\"none\"` raw counts, `\"proportional_fitting\"` using mean library size pseudobulk data normalize. already normalized, make sure choose `\"none\"` (default)","code":""},{"path":"https://csgroen.github.io/deconverse/reference/deconvolute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deconvolute `scbench` object using a chosen method — deconvolute.scbench","text":"object class `scbench` tibble deconvolution results","code":""},{"path":"https://csgroen.github.io/deconverse/reference/deconvolute_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Deconvolute `scbench` object using all methods with default settings — deconvolute_all.scbench","title":"Deconvolute `scbench` object using all methods with default settings — deconvolute_all.scbench","text":"Deconvolute `scbench` object using methods default settings Deconvolute bulk RNA-seq matrix using methods default settings","code":""},{"path":"https://csgroen.github.io/deconverse/reference/deconvolute_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deconvolute `scbench` object using all methods with default settings — deconvolute_all.scbench","text":"","code":"# S3 method for scbench deconvolute_all(scbench, scref, methods = deconvolution_methods(), ...)  # S3 method for matrix deconvolute_all(bulk_data, scref, methods = deconvolution_methods(), ...)"},{"path":"https://csgroen.github.io/deconverse/reference/deconvolute_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deconvolute `scbench` object using all methods with default settings — deconvolute_all.scbench","text":"scbench `scbench` object already processed `pseudobulks` scref `screference` object containing references methods require methods vector strings, methods use. available methods, consult `deconvolution_methods()` ... passed `deconvolute` CIBERSORTx credentials bulk_data count matrix genes--samples","code":""},{"path":"https://csgroen.github.io/deconverse/reference/deconvolute_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deconvolute `scbench` object using all methods with default settings — deconvolute_all.scbench","text":"object class `scbench` list method's deconvolution results","code":""},{"path":"https://csgroen.github.io/deconverse/reference/delete_cached.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete cached data on an `screference` object — delete_cached","title":"Delete cached data on an `screference` object — delete_cached","text":"Delete cached data `screference` object","code":""},{"path":"https://csgroen.github.io/deconverse/reference/delete_cached.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete cached data on an `screference` object — delete_cached","text":"","code":"delete_cached(scref, which)"},{"path":"https://csgroen.github.io/deconverse/reference/delete_cached.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete cached data on an `screference` object — delete_cached","text":"scref `screference` object string, cached result delete","code":""},{"path":"https://csgroen.github.io/deconverse/reference/delete_cached.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete cached data on an `screference` object — delete_cached","text":"screference object","code":""},{"path":"https://csgroen.github.io/deconverse/reference/dot-pp_PBMCs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Seurat PBMCs pre-processed example — .pp_PBMCs","title":"Get Seurat PBMCs pre-processed example — .pp_PBMCs","text":"Get Seurat PBMCs pre-processed example","code":""},{"path":"https://csgroen.github.io/deconverse/reference/dot-pp_PBMCs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Seurat PBMCs pre-processed example — .pp_PBMCs","text":"","code":".pp_PBMCs()"},{"path":"https://csgroen.github.io/deconverse/reference/dwls_deconvolute.html","id":null,"dir":"Reference","previous_headings":"","what":"Dampened weighted least squares (DWLS) deconvolution of bulk data using an `screference` — dwls_deconvolute","title":"Dampened weighted least squares (DWLS) deconvolution of bulk data using an `screference` — dwls_deconvolute","text":"Dampened weighted least squares (DWLS) deconvolution bulk data using `screference`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/dwls_deconvolute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dampened weighted least squares (DWLS) deconvolution of bulk data using an `screference` — dwls_deconvolute","text":"","code":"dwls_deconvolute(bulk_data, scref, ncores = 4)"},{"path":"https://csgroen.github.io/deconverse/reference/dwls_deconvolute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dampened weighted least squares (DWLS) deconvolution of bulk data using an `screference` — dwls_deconvolute","text":"bulk_data matrix genes--samples bulk mixtures scref object class `screference` n_cores number cores used computation tibble deconvolution fractions","code":""},{"path":"https://csgroen.github.io/deconverse/reference/dwls_scref.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute reference signature matrix from `screference` object using\nmethod implemented in DWLS package for methods `dwls`, `svr` and `ols` — dwls_scref","title":"Compute reference signature matrix from `screference` object using\nmethod implemented in DWLS package for methods `dwls`, `svr` and `ols` — dwls_scref","text":"Compute reference signature matrix `screference` object using method implemented DWLS package methods `dwls`, `svr` `ols`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/dwls_scref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute reference signature matrix from `screference` object using\nmethod implemented in DWLS package for methods `dwls`, `svr` and `ols` — dwls_scref","text":"","code":"dwls_scref(scref, cache_path = \"dwls\", logFC_cutoff = 0.5, pval_cutoff = 0.01)"},{"path":"https://csgroen.github.io/deconverse/reference/dwls_scref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute reference signature matrix from `screference` object using\nmethod implemented in DWLS package for methods `dwls`, `svr` and `ols` — dwls_scref","text":"scref object `screference cache_path path cache results logFC_cutoff float, cutoff log fold-change differential expression analysis populations selection markers pval_cutoff float, p-value cutoff differential expression analysis selection markers","code":""},{"path":"https://csgroen.github.io/deconverse/reference/dwls_scref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute reference signature matrix from `screference` object using\nmethod implemented in DWLS package for methods `dwls`, `svr` and `ols` — dwls_scref","text":"signature matrix","code":""},{"path":"https://csgroen.github.io/deconverse/reference/get_benchmark_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Get benchmark results from `scbench` object in a tidy format — get_benchmark_results","title":"Get benchmark results from `scbench` object in a tidy format — get_benchmark_results","text":"Get benchmark results `scbench` object tidy format","code":""},{"path":"https://csgroen.github.io/deconverse/reference/get_benchmark_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get benchmark results from `scbench` object in a tidy format — get_benchmark_results","text":"","code":"get_benchmark_results(   scbench,   methods = NULL,   level = NULL,   type = \"population\" )"},{"path":"https://csgroen.github.io/deconverse/reference/get_benchmark_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get benchmark results from `scbench` object in a tidy format — get_benchmark_results","text":"scbench `scbench` object already processed `deconvolute` `deconvolute_all` methods NULL, string, vector strings. Results returned methods indicated. See `deconvolution_methods()` methods. type type deconvoluted mixtures. One : `\"population\"`, `\"spillover\"` `\"lod\"` `tibble` results.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/install_cibersortx.html","id":null,"dir":"Reference","previous_headings":"","what":"Installs CIBERSORTx container using docker or singularity — install_cibersortx","title":"Installs CIBERSORTx container using docker or singularity — install_cibersortx","text":"Installs CIBERSORTx container using docker singularity","code":""},{"path":"https://csgroen.github.io/deconverse/reference/install_cibersortx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Installs CIBERSORTx container using docker or singularity — install_cibersortx","text":"","code":"install_cibersortx(container_type = c(\"docker\", \"singularity\")[1])"},{"path":"https://csgroen.github.io/deconverse/reference/install_cibersortx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Installs CIBERSORTx container using docker or singularity — install_cibersortx","text":"container_type container software used. one : \"docker\" \"singularity\"","code":""},{"path":"https://csgroen.github.io/deconverse/reference/mixtures_lod.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate mixtures to find the limit of detection of each population in\nmixtures in an `scbench` object — mixtures_lod","title":"Simulate mixtures to find the limit of detection of each population in\nmixtures in an `scbench` object — mixtures_lod","text":"Simulate mixtures find limit detection population mixtures `scbench` object","code":""},{"path":"https://csgroen.github.io/deconverse/reference/mixtures_lod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate mixtures to find the limit of detection of each population in\nmixtures in an `scbench` object — mixtures_lod","text":"","code":"mixtures_lod(scbench, max_prop = 0.2, step = 0.01)"},{"path":"https://csgroen.github.io/deconverse/reference/mixtures_lod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate mixtures to find the limit of detection of each population in\nmixtures in an `scbench` object — mixtures_lod","text":"scbench `scbench` object max_prop float, maximum proportion target population tested step step 0 `max_prop` sequence tested limit detection nsamp_per_step number samples per step, used statistics results calibration curves prop_noise_sd value added noise different samples generated observation","code":""},{"path":"https://csgroen.github.io/deconverse/reference/mixtures_lod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate mixtures to find the limit of detection of each population in\nmixtures in an `scbench` object — mixtures_lod","text":"object class `scbench`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/mixtures_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate sample population mixtures given bounds in an `scbench` object — mixtures_population","title":"Simulate sample population mixtures given bounds in an `scbench` object — mixtures_population","text":"Simulate sample population mixtures given bounds `scbench` object","code":""},{"path":"https://csgroen.github.io/deconverse/reference/mixtures_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate sample population mixtures given bounds in an `scbench` object — mixtures_population","text":"","code":"mixtures_population(scbench, nsamps = 1000, seed = 0)"},{"path":"https://csgroen.github.io/deconverse/reference/mixtures_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate sample population mixtures given bounds in an `scbench` object — mixtures_population","text":"scbench `scbench` object nsamps integer representing number samples simulate seed integer representing \"seed\", reproducibility mixtures.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/mixtures_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate sample population mixtures given bounds in an `scbench` object — mixtures_population","text":"object class `scbench`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/mixtures_spillover.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate mixtures for measuring spillover between all pairs of populations\nin an `scbench` object — mixtures_spillover","title":"Simulate mixtures for measuring spillover between all pairs of populations\nin an `scbench` object — mixtures_spillover","text":"Simulate mixtures measuring spillover pairs populations `scbench` object","code":""},{"path":"https://csgroen.github.io/deconverse/reference/mixtures_spillover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate mixtures for measuring spillover between all pairs of populations\nin an `scbench` object — mixtures_spillover","text":"","code":"mixtures_spillover(scbench, step = 0.05)"},{"path":"https://csgroen.github.io/deconverse/reference/mixtures_spillover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate mixtures for measuring spillover between all pairs of populations\nin an `scbench` object — mixtures_spillover","text":"scbench `scbench` object step float, defines step sequence creating mixtures simulating spillover effects","code":""},{"path":"https://csgroen.github.io/deconverse/reference/mixtures_spillover.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate mixtures for measuring spillover between all pairs of populations\nin an `scbench` object — mixtures_spillover","text":"object class `scbench`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/music_deconvolute.html","id":null,"dir":"Reference","previous_headings":"","what":"MuSiC deconvolution of bulk data using an `screference` — music_deconvolute","title":"MuSiC deconvolution of bulk data using an `screference` — music_deconvolute","text":"MuSiC deconvolution bulk data using `screference`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/music_deconvolute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MuSiC deconvolution of bulk data using an `screference` — music_deconvolute","text":"","code":"music_deconvolute(bulk_data, scref)"},{"path":"https://csgroen.github.io/deconverse/reference/music_deconvolute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MuSiC deconvolution of bulk data using an `screference` — music_deconvolute","text":"bulk_data matrix genes--samples bulk mixtures scref object class `screference`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/music_deconvolute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MuSiC deconvolution of bulk data using an `screference` — music_deconvolute","text":"tibble deconvolution fractions model metrics","code":""},{"path":"https://csgroen.github.io/deconverse/reference/new_hscreference.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate multi-level hierarchical single-cell reference (`hscreference`) object — new_hscreference","title":"Generate multi-level hierarchical single-cell reference (`hscreference`) object — new_hscreference","text":"Generate multi-level hierarchical single-cell reference (`hscreference`) object","code":""},{"path":"https://csgroen.github.io/deconverse/reference/new_hscreference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate multi-level hierarchical single-cell reference (`hscreference`) object — new_hscreference","text":"","code":"new_hscreference(   seurat_obj,   annot_ids,   batch_id = NULL,   project_name = \"project\",   cache_path = \"scref_cache\",   sample_cells = NULL,   seed = NULL )"},{"path":"https://csgroen.github.io/deconverse/reference/new_hscreference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate multi-level hierarchical single-cell reference (`hscreference`) object — new_hscreference","text":"seurat_obj reference Seurat object annot_ids order, column names Seurat object metadata coarsest finest grained annotation batch_id NULL column name Seurat object metadata containing information batch used batch information downstream. Examples batch patient ID, study ID, etc. project_name string indicating project name, used caching cache_path path directory results cached sample_cells NULL list many cells randomly sub-sample population coarsest grained annotation. Sub-sampling can make object significantly smaller accelerate downstream computation, make results less accurate. seed integer representing \"seed\", reproducibility sub-sampling.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/new_hscreference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate multi-level hierarchical single-cell reference (`hscreference`) object — new_hscreference","text":"object class `hscreference`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/new_scbench.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate `scbench` object — new_scbench","title":"Generate `scbench` object — new_scbench","text":"Generate `scbench` object","code":""},{"path":"https://csgroen.github.io/deconverse/reference/new_scbench.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate `scbench` object — new_scbench","text":"","code":"new_scbench(   ref_scrna,   annot_ids,   pop_bounds = NULL,   project_name = \"project\",   cache_path = \"scbench_cache\",   batch_id = NULL )"},{"path":"https://csgroen.github.io/deconverse/reference/new_scbench.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate `scbench` object — new_scbench","text":"ref_scrna reference Seurat object annot_ids named vector column names annotations per level, e.g. `c(\"l1\" = \"annot1\", \"l2\" = \"annot2\")` pop_bounds list population bounds, see example. `NULL`, bounds set 0-1 every population. project_name string indicating project name, used caching cache_path path directory results cached batch_id NULL string column name batch information simulating pseudobulks batch","code":""},{"path":"https://csgroen.github.io/deconverse/reference/new_scbench.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate `scbench` object — new_scbench","text":"object class scbench","code":""},{"path":"https://csgroen.github.io/deconverse/reference/new_screference.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate single-cell reference (`screference`) object — new_screference","title":"Generate single-cell reference (`screference`) object — new_screference","text":"Generate single-cell reference (`screference`) object","code":""},{"path":"https://csgroen.github.io/deconverse/reference/new_screference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate single-cell reference (`screference`) object — new_screference","text":"","code":"new_screference(   seurat_obj,   annot_id,   batch_id = NULL,   project_name = \"project\",   cache_path = \"scref_cache\",   sample_cells = NULL,   seed = NULL )"},{"path":"https://csgroen.github.io/deconverse/reference/new_screference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate single-cell reference (`screference`) object — new_screference","text":"seurat_obj reference Seurat object annot_id column name Seurat object metadata containing reference annotation batch_id NULL column name Seurat object metadata containing information batch used batch information downstream. Examples batch patient ID, study ID, etc. project_name string indicating project name, used caching cache_path path directory results cached. sample_cells NULL list many cells randomly sub-sample population. Sub-sampling can make object significantly smaller accelerate downstream computation, make results less accurate. seed integer representing \"seed\", reproducibility sub-sampling.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/new_screference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate single-cell reference (`screference`) object — new_screference","text":"object class `screference`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/ols_deconvolute.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordinary least squares (OLS) deconvolution of bulk data using an `screference` — ols_deconvolute","title":"Ordinary least squares (OLS) deconvolution of bulk data using an `screference` — ols_deconvolute","text":"Ordinary least squares (OLS) deconvolution bulk data using `screference`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/ols_deconvolute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ordinary least squares (OLS) deconvolution of bulk data using an `screference` — ols_deconvolute","text":"","code":"ols_deconvolute(bulk_data, scref, ncores = 4)"},{"path":"https://csgroen.github.io/deconverse/reference/ols_deconvolute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordinary least squares (OLS) deconvolution of bulk data using an `screference` — ols_deconvolute","text":"bulk_data matrix genes--samples bulk mixtures scref object class `screference` n_cores number cores used computation tibble deconvolution fractions","code":""},{"path":"https://csgroen.github.io/deconverse/reference/pbmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Seurat example PBCM dataset — pbmc","title":"Seurat example PBCM dataset — pbmc","text":"Cells annotated example pipeline Seurat package vignette, already preprocessed, Platelet cluster removed (cells)","code":""},{"path":"https://csgroen.github.io/deconverse/reference/pbmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seurat example PBCM dataset — pbmc","text":"","code":"pbmc"},{"path":"https://csgroen.github.io/deconverse/reference/pbmc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Seurat example PBCM dataset — pbmc","text":"`pbmc` Seurat Object.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/pbmc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Seurat example PBCM dataset — pbmc","text":"<https://satijalab.org/seurat/articles/pbmc3k_tutorial.html>","code":""},{"path":"https://csgroen.github.io/deconverse/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://csgroen.github.io/deconverse/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_cor_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmap of correlation between deconvolution results for simulated\npopulations and true mixtures used for the pseudobulks — plt_cor_heatmap","title":"Plot heatmap of correlation between deconvolution results for simulated\npopulations and true mixtures used for the pseudobulks — plt_cor_heatmap","text":"Plot heatmap correlation deconvolution results simulated populations true mixtures used pseudobulks","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_cor_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmap of correlation between deconvolution results for simulated\npopulations and true mixtures used for the pseudobulks — plt_cor_heatmap","text":"","code":"plt_cor_heatmap(scbench, level = NULL)"},{"path":"https://csgroen.github.io/deconverse/reference/plt_cor_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmap of correlation between deconvolution results for simulated\npopulations and true mixtures used for the pseudobulks — plt_cor_heatmap","text":"scbench `scbench` object evaluated `deconvolute` level annotation level show. Finest-grained annotation (highest level) default.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_cor_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot heatmap of correlation between deconvolution results for simulated\npopulations and true mixtures used for the pseudobulks — plt_cor_heatmap","text":"list, containing `heatmap`, ggheatmap object, `cor_table`, table summarizing results","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_cors_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot correlations by population between deconvolution results\nfor simulated populations and true mixtures used for the pseudobulk — plt_cors_scatter","title":"Plot correlations by population between deconvolution results\nfor simulated populations and true mixtures used for the pseudobulk — plt_cors_scatter","text":"Plot correlations population deconvolution results simulated populations true mixtures used pseudobulk","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_cors_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot correlations by population between deconvolution results\nfor simulated populations and true mixtures used for the pseudobulk — plt_cors_scatter","text":"","code":"plt_cors_scatter(scbench, method, level = NULL)"},{"path":"https://csgroen.github.io/deconverse/reference/plt_cors_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot correlations by population between deconvolution results\nfor simulated populations and true mixtures used for the pseudobulk — plt_cors_scatter","text":"scbench `scbench` object evaluated `deconvolute` method string, one `deconvolution_methods()` level annotation level show. Finest-grained annotation (highest level) default.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_cors_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot correlations by population between deconvolution results\nfor simulated populations and true mixtures used for the pseudobulk — plt_cors_scatter","text":"ggplot object","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_lod_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmap summarizing limit of detection by population and method — plt_lod_heatmap","title":"Plot heatmap summarizing limit of detection by population and method — plt_lod_heatmap","text":"Plot heatmap summarizing limit detection population method","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_lod_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmap summarizing limit of detection by population and method — plt_lod_heatmap","text":"","code":"plt_lod_heatmap(scbench, level = NULL)"},{"path":"https://csgroen.github.io/deconverse/reference/plt_lod_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmap summarizing limit of detection by population and method — plt_lod_heatmap","text":"scbench `scbench` object evaluated `deconvolute` level annotation level show. Finest-grained annotation (highest level) default.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_lod_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot heatmap summarizing limit of detection by population and method — plt_lod_heatmap","text":"list, containing `heatmap`, ggheatmap object, `lod_table`, table summarizing results","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_lod_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot limit of detection of deconvolution for each population as the proportion\nof the pseudobulk where the method estimation is higher than at proportion=0 for\neach population — plt_lod_scatter","title":"Plot limit of detection of deconvolution for each population as the proportion\nof the pseudobulk where the method estimation is higher than at proportion=0 for\neach population — plt_lod_scatter","text":"Plot limit detection deconvolution population proportion pseudobulk method estimation higher proportion=0 population","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_lod_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot limit of detection of deconvolution for each population as the proportion\nof the pseudobulk where the method estimation is higher than at proportion=0 for\neach population — plt_lod_scatter","text":"","code":"plt_lod_scatter(scbench, method, level = NULL)"},{"path":"https://csgroen.github.io/deconverse/reference/plt_lod_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot limit of detection of deconvolution for each population as the proportion\nof the pseudobulk where the method estimation is higher than at proportion=0 for\neach population — plt_lod_scatter","text":"scbench `scbench` object evaluated `deconvolute` method string, one `deconvolution_methods()` level annotation level show. Finest-grained annotation (highest level) default.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_lod_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot limit of detection of deconvolution for each population as the proportion\nof the pseudobulk where the method estimation is higher than at proportion=0 for\neach population — plt_lod_scatter","text":"ggplot object","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_population_mixtures.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sample population mixtures from an `scbench` object — plt_population_mixtures","title":"Plot sample population mixtures from an `scbench` object — plt_population_mixtures","text":"Plot sample population mixtures `scbench` object","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_population_mixtures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sample population mixtures from an `scbench` object — plt_population_mixtures","text":"","code":"plt_population_mixtures(scbench, nshow = 50, order_by = NULL)"},{"path":"https://csgroen.github.io/deconverse/reference/plt_population_mixtures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sample population mixtures from an `scbench` object — plt_population_mixtures","text":"scbench `scbench` object evaluated `population_mixtures` nshow integer, number samples plot order_by string name population order samples increasing mixtures `order_by`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_population_mixtures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot sample population mixtures from an `scbench` object — plt_population_mixtures","text":"ggplot object","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_rmse_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot RMSE between deconvolution results for simulated populations and\ntrue mixtures used for the pseudobulks — plt_rmse_heatmap","title":"Plot RMSE between deconvolution results for simulated populations and\ntrue mixtures used for the pseudobulks — plt_rmse_heatmap","text":"Plot RMSE deconvolution results simulated populations true mixtures used pseudobulks","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_rmse_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot RMSE between deconvolution results for simulated populations and\ntrue mixtures used for the pseudobulks — plt_rmse_heatmap","text":"","code":"plt_rmse_heatmap(scbench, level = NULL)"},{"path":"https://csgroen.github.io/deconverse/reference/plt_rmse_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot RMSE between deconvolution results for simulated populations and\ntrue mixtures used for the pseudobulks — plt_rmse_heatmap","text":"scbench `scbench` object evaluated `deconvolute` level annotation level show. Finest-grained annotation (highest level) default.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_rmse_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot RMSE between deconvolution results for simulated populations and\ntrue mixtures used for the pseudobulks — plt_rmse_heatmap","text":"list, containing `heatmap`, ggheatmap object, `rmse_table`, table summarizing results","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_spillover_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmap summarizing spillover RMSE by population and method — plt_spillover_heatmap","title":"Plot heatmap summarizing spillover RMSE by population and method — plt_spillover_heatmap","text":"Plot heatmap summarizing spillover RMSE population method","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_spillover_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmap summarizing spillover RMSE by population and method — plt_spillover_heatmap","text":"","code":"plt_spillover_heatmap(scbench, level = NULL)"},{"path":"https://csgroen.github.io/deconverse/reference/plt_spillover_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmap summarizing spillover RMSE by population and method — plt_spillover_heatmap","text":"scbench `scbench` object evaluated `deconvolute` level annotation level show. Finest-grained annotation (highest level) default.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_spillover_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot heatmap summarizing spillover RMSE by population and method — plt_spillover_heatmap","text":"list, containing `heatmap`, ggheatmap object, `rmse_table`, table summarizing results","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_spillover_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot correlations between deconvolution results and spillover mixtures\nbetween each pair of populations — plt_spillover_scatter","title":"Plot correlations between deconvolution results and spillover mixtures\nbetween each pair of populations — plt_spillover_scatter","text":"Plot correlations deconvolution results spillover mixtures pair populations","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_spillover_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot correlations between deconvolution results and spillover mixtures\nbetween each pair of populations — plt_spillover_scatter","text":"","code":"plt_spillover_scatter(scbench, method, level = NULL)"},{"path":"https://csgroen.github.io/deconverse/reference/plt_spillover_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot correlations between deconvolution results and spillover mixtures\nbetween each pair of populations — plt_spillover_scatter","text":"scbench `scbench` object evaluated `deconvolute` method string, one `deconvolution_methods()` level annotation level show. Finest-grained annotation (highest level) default.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/plt_spillover_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot correlations between deconvolution results and spillover mixtures\nbetween each pair of populations — plt_spillover_scatter","text":"ggplot object","code":""},{"path":"https://csgroen.github.io/deconverse/reference/pseudobulks.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate pseudobulk gene expression from single-cell RNA-seq given\npopulation mixtures in an `scbench` object — pseudobulks","title":"Generate pseudobulk gene expression from single-cell RNA-seq given\npopulation mixtures in an `scbench` object — pseudobulks","text":"Generate pseudobulk gene expression single-cell RNA-seq given population mixtures `scbench` object","code":""},{"path":"https://csgroen.github.io/deconverse/reference/pseudobulks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate pseudobulk gene expression from single-cell RNA-seq given\npopulation mixtures in an `scbench` object — pseudobulks","text":"","code":"pseudobulks(   scbench,   ncells = 2000,   ncores = 8,   shrink_obj = TRUE,   by_batch = FALSE,   seed = 0 )"},{"path":"https://csgroen.github.io/deconverse/reference/pseudobulks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate pseudobulk gene expression from single-cell RNA-seq given\npopulation mixtures in an `scbench` object — pseudobulks","text":"scbench `scbench` object evaluated `population_mixtures` ncells integer, number cells pool pseudobulk. shrink_obj boolean, TRUE, `scbench` object reduced size removing single-cell expression data keeping metadata estimating pseudobulks by_batch boolean, TRUE, pseudobulks estimated batch using `batch_id` provided creating object. seed integer representing \"seed\", reproducibility mixtures. level string character, reference data level pseudobulk pooling (e.g. `\"l1\"`, `\"l2\"`)","code":""},{"path":"https://csgroen.github.io/deconverse/reference/pseudobulks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate pseudobulk gene expression from single-cell RNA-seq given\npopulation mixtures in an `scbench` object — pseudobulks","text":"object class `scbench`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/results.scbench.html","id":null,"dir":"Reference","previous_headings":"","what":"Get summary of benchmark results for an analysis type — results.scbench","title":"Get summary of benchmark results for an analysis type — results.scbench","text":"Get summary benchmark results analysis type","code":""},{"path":"https://csgroen.github.io/deconverse/reference/results.scbench.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get summary of benchmark results for an analysis type — results.scbench","text":"","code":"# S3 method for scbench results(scbench, type = \"population\")"},{"path":"https://csgroen.github.io/deconverse/reference/results.scbench.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get summary of benchmark results for an analysis type — results.scbench","text":"scbench processed `scbench` object type implemented. now, returns population results","code":""},{"path":"https://csgroen.github.io/deconverse/reference/results.scbench.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get summary of benchmark results for an analysis type — results.scbench","text":"summarized table population benchmarking results tested methods, ordered mean correlation ground truth proportions.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/results_tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Get benchmark results from `scbench` object in a tidy format, without\nperformance metrics — results_tidy","title":"Get benchmark results from `scbench` object in a tidy format, without\nperformance metrics — results_tidy","text":"Get benchmark results `scbench` object tidy format, without performance metrics","code":""},{"path":"https://csgroen.github.io/deconverse/reference/results_tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get benchmark results from `scbench` object in a tidy format, without\nperformance metrics — results_tidy","text":"","code":"results_tidy(scbench, methods = NULL, level = NULL, type = \"population\")"},{"path":"https://csgroen.github.io/deconverse/reference/results_tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get benchmark results from `scbench` object in a tidy format, without\nperformance metrics — results_tidy","text":"scbench `scbench` object already processed `deconvolute` `deconvolute_all` methods NULL, string, vector strings. Results returned methods indicated. See `deconvolution_methods()` methods. type type deconvoluted mixtures. One : `\"population\"`, `\"spillover\"` `\"lod\"` `tibble` results.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/scaden_deconvolute.html","id":null,"dir":"Reference","previous_headings":"","what":"scaden (Single-cell assisted deconvolutional network) deconvolution of bulk data using an `screference` — scaden_deconvolute","title":"scaden (Single-cell assisted deconvolutional network) deconvolution of bulk data using an `screference` — scaden_deconvolute","text":"scaden (Single-cell assisted deconvolutional network) deconvolution bulk data using `screference`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/scaden_deconvolute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scaden (Single-cell assisted deconvolutional network) deconvolution of bulk data using an `screference` — scaden_deconvolute","text":"","code":"scaden_deconvolute(   bulk_data,   scref,   res_cache_path = \"scaden_results\",   retrain = FALSE,   ... )"},{"path":"https://csgroen.github.io/deconverse/reference/scaden_deconvolute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"scaden (Single-cell assisted deconvolutional network) deconvolution of bulk data using an `screference` — scaden_deconvolute","text":"bulk_data matrix genes--samples bulk mixtures scref object class `screference` res_cache_path path cache intermediate results retrain TRUE, model re-processed `bulk_data` reference retrained ... passed scaden_scref retrain = TRUE tibble deconvolution fractions","code":""},{"path":"https://csgroen.github.io/deconverse/reference/scaden_deconvolute.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"scaden (Single-cell assisted deconvolutional network) deconvolution of bulk data using an `screference` — scaden_deconvolute","text":"Reference: Menden, Kevin, Mohamed Marouf, Sergio Oller et al., 2020. “Deep Learning–Based Cell Composition Analysis Tissue Expression Profiles.” Science Advances 6 (30): eaba2619. https://doi.org/10.1126/sciadv.aba2619. See also: https://github.com/theislab/AutoGeneS","code":""},{"path":"https://csgroen.github.io/deconverse/reference/scaden_scref.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute reference matrix from an `screference` object using scaden (Single-cell assisted deconvolutional network) — scaden_scref","title":"Compute reference matrix from an `screference` object using scaden (Single-cell assisted deconvolutional network) — scaden_scref","text":"Compute reference matrix `screference` object using scaden (Single-cell assisted deconvolutional network)","code":""},{"path":"https://csgroen.github.io/deconverse/reference/scaden_scref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute reference matrix from an `screference` object using scaden (Single-cell assisted deconvolutional network) — scaden_scref","text":"","code":"scaden_scref(   scref,   cache_path = \"scaden\",   bulk_mat = NULL,   force_retrain = FALSE,   n_cells_sim = 100,   n_samples_sim = 1000,   batch_size = 128,   learning_rate = 1e-04,   steps = 1000,   seed = 0,   gpu = FALSE )"},{"path":"https://csgroen.github.io/deconverse/reference/scaden_scref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute reference matrix from an `screference` object using scaden (Single-cell assisted deconvolutional network) — scaden_scref","text":"scref object class `screference` cache_path path directory intermediate files stored (default \"scaden\") bulk_mat matrix containing bulk gene expression data. NULL, pseudobulk created reference. force_retrain TRUE, model retrained even trained model already exists (default FALSE) n_cells_sim number cells simulate (default 100) n_samples_sim number samples simulate (default 1000) batch_size batch size used training (default 128) learning_rate learning rate used training (default 0.0001) steps number training steps (default 1000) seed random seed used training (default 0) gpu TRUE, installs Tensorflow uses GPU acceleration (default FALSE)","code":""},{"path":"https://csgroen.github.io/deconverse/reference/scaden_scref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute reference matrix from an `screference` object using scaden (Single-cell assisted deconvolutional network) — scaden_scref","text":"path directory containing trained model","code":""},{"path":"https://csgroen.github.io/deconverse/reference/scaden_scref.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute reference matrix from an `screference` object using scaden (Single-cell assisted deconvolutional network) — scaden_scref","text":"Reference: Menden, Kevin, Mohamed Marouf, Sergio Oller et al., 2020. “Deep Learning–Based Cell Composition Analysis Tissue Expression Profiles.” Science Advances 6 (30): eaba2619. https://doi.org/10.1126/sciadv.aba2619. See also: https://github.com/theislab/AutoGeneS","code":""},{"path":"https://csgroen.github.io/deconverse/reference/svr_deconvolute.html","id":null,"dir":"Reference","previous_headings":"","what":"Support vector regression (SVR) deconvolution of bulk data using an `screference` — svr_deconvolute","title":"Support vector regression (SVR) deconvolution of bulk data using an `screference` — svr_deconvolute","text":"Support vector regression (SVR) deconvolution bulk data using `screference`","code":""},{"path":"https://csgroen.github.io/deconverse/reference/svr_deconvolute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Support vector regression (SVR) deconvolution of bulk data using an `screference` — svr_deconvolute","text":"","code":"svr_deconvolute(bulk_data, scref, ncores = 4)"},{"path":"https://csgroen.github.io/deconverse/reference/svr_deconvolute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Support vector regression (SVR) deconvolution of bulk data using an `screference` — svr_deconvolute","text":"bulk_data matrix genes--samples bulk mixtures scref object class `screference` n_cores number cores used computation tibble deconvolution fractions","code":""},{"path":"https://csgroen.github.io/deconverse/reference/test_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate annotation labels using Seurat markers — test_markers","title":"Evaluate annotation labels using Seurat markers — test_markers","text":"Identifies differentially expressed markers clusters evaluates performance.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/test_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate annotation labels using Seurat markers — test_markers","text":"","code":"test_markers(seurat_obj, annotation, min_FC = 5, ideal_FC = 20, ncores = 4)"},{"path":"https://csgroen.github.io/deconverse/reference/test_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate annotation labels using Seurat markers — test_markers","text":"seurat_obj Seurat object containing single-cell gene expression data annotation character string indicating name column seurat_obj@meta.data containing annotation interest. min_FC Minimum fold change required marker pass diagnosis. default value 5. ideal_FC Ideal fold change required marker considered outstanding. default value 20. ncores Number cores use parallelization FindAllMarkers function. default value 4.","code":""},{"path":"https://csgroen.github.io/deconverse/reference/test_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate annotation labels using Seurat markers — test_markers","text":"list three items:  * top_mks: data.frame top 10 markers cluster,  average fold change p-value.  * full_mks: data.frame markers tested, average fold  change, p-value, metrics.  * mk_status: named vector status cluster based  expression top markers.","code":""}]
